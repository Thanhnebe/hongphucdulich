import React, { createContext, useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { ITicket, FormTicket } from "../interface/ticket";
import { addFlight, deleteFlight, getAllFlights, updateFlight } from "../services/ticketService";

type Props = {
    children: React.ReactNode;
};

export const ticketCT = createContext({} as any);

const TicketContext = ({ children }: Props) => {
    const [tickets, setTickets] = useState<ITicket[]>([]);
    const navigate = useNavigate();

    useEffect(() => {
        (async () => {
            try {
                const data = await getAllFlights();
                setTickets(data.data);
            } catch (error) {
                console.error("Error fetching tickets:", error);
            }
        })();
    }, []);

    // H√†m th√™m v√©
    const onAdd = async (formData: FormTicket) => {
        try {
            const response = await addFlight(formData);

            if (!response || response.error) {
                throw new Error(response?.message || "Kh√¥ng th·ªÉ th√™m v√©, vui l√≤ng th·ª≠ l·∫°i!");
            }

            alert("üéâ Th√™m v√© th√†nh c√¥ng!");

            // C·∫≠p nh·∫≠t danh s√°ch v√© sau khi th√™m
            const updatedTickets = await getAllFlights();
            setTickets(updatedTickets.data);
        } catch (error) {
            console.error("‚ùå L·ªói khi th√™m v√©:", error);
            alert(`‚ö†Ô∏è L·ªói: ${error.message || "C√≥ l·ªói x·∫£y ra khi th√™m v√©!"}`);
        }
    };

    // H√†m x√≥a v√©
    const onDelete = async (id: number | string) => {
        if (confirm("B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a v√© n√†y?")) {
            try {
                await deleteFlight(id);
                alert("X√≥a v√© th√†nh c√¥ng");
                setTickets(tickets.filter((ticket) => ticket.id !== id));
            } catch (error) {
                console.error("Error deleting ticket:", error);
            }
        }
    };

    // H√†m c·∫≠p nh·∫≠t v√©
    const onUpdate = async (data: FormTicket, id: number | string) => {
        try {
            await updateFlight(data, id);
            alert("C·∫≠p nh·∫≠t v√© th√†nh c√¥ng");
            const updatedTickets = await getAllFlights();
            setTickets(updatedTickets.data);
            navigate("/tickets");
        } catch (error) {
            console.error("Error updating ticket:", error);
        }
    };

    return (
        <ticketCT.Provider value={{ tickets, onAdd, onDelete, onUpdate }}>
            {children}
        </ticketCT.Provider>
    );
};

export default TicketContext;
